* Overview

Simple example of using clojure with kubernetes (minikube).

* Pre-requisites

Install minikube, docker, clojure, etc on your computer.

* Clojure code

: src/clj_dok/core.clj

The following lines starts a webserver that spits out "Hello, World!",
this is served on port 3000.

#+begin_src clojure
  ...
  ;; spit out Hello, World!
  (response/response (str "Hello, " (or (:name params) "World!") "\n"))))

  ;; Start webserver on port 3000
  (reset! server (jetty/run-jetty app {:port 3000 :join? false}))
  ...
#+end_src

Run this from project root, check it works and stop it.

: clj -m clj-dok.core
: curl localhost:3000
Hello, World!

* Verify running in Docker Container

build your image, run mapping 8080 -> 3000, test, stop.

: docker build -t fenton/my-clojure-app .
: docker run -p 8080:3000 fenton/my-clojure-app
: curl localhost:8080
Hello, World!

* Push to docker hub

push image to docker image repository (change 'fenton' to your docker
hub username)

: docker push fenton/my-clojure-app

remove the image from local docker

: docker rmi -f fenton/my-clojure-app

* Kubernetes (minikube)

clean up minikube, start minikube 

: minikube delete
: minikube start

From console, in folder: ~kube-cloj/.kube/~, apply the deployment and
the service.

: kubectl apply -f deployment.yaml
: kubectl apply -f node-port-service.yaml

Find out the IP address of the cluster with:

: minikube ip

Mine returned: 192.168.49.2, so I'll curl for the website at:

: curl 192.168.49.2:30007
Hello, World!

Lets examine the deployments.yaml file (elided less important rows).

#+begin_src yaml
spec:
  replicas: 2   <--- how many pods/containers to have
  template:
    spec:
      containers:
        image: fenton/my-clojure-app  <--- docker hub image to pull down
        resources:
          requests:
            cpu: "100m"  <--- use 10% of a single CPU
        ports:
        - containerPort: 3000  <--- which port the containers will expose
#+end_src

The above will deploy the pods/containers in kubernetes private
network cluster.  So we need to expose an external port.  For that we
use the file: ~node-port-service.yaml~

(elided less important rows)

#+begin_src yaml
spec:
  ports:
      port: 30000       # Port to access inside the cluster, we wont
                        # really use this at all
      targetPort: 3000  # Port of the container
      nodePort: 30007   # The port to expose on the Minikube node (between 30000-32767)
  type: NodePort
#+end_src



* Trying to get load-balancer working with clojure [0/3]
** Debugging

We can look at the logs of the hcloud-cloud-controller-manager to see
why the load balancer is unhealthy

 - get all the PODS and look for *hcloud-cloud-controller-manager-...*

Then we can look at the logs for that with:

: kcgp -A
NAMESPACE        NAME                                               READY   STATUS    RESTARTS   AGE
...
kube-system      hcloud-cloud-controller-manager-5bb66cfc55-hlw47   1/1     Running   0          51m


: kc logs -n kube-system hcloud-cloud-controller-manager-5bb66cfc55-hlw47
** Steps



 - [ ] create cluster
 
This is the base cluster: machine, networking, etc..

: cd ~/projects/kube-cloj/hetzner
: hetzner-k3s create --config cluster-config.yaml

Wait 2:49 (mm:ss).

Check hetzner: https://console.hetzner.cloud/usage

- [ ] sample deployment

This is the project the guy uses in the video:

https://www.youtube.com/watch?v=u5l-F8nPumE&list=PLa6U5rUhfdnRFytiEKqVS9X8uJRTopC0u

: cd ../helm-example
: kc apply -f .
: curl http://49.13.43.189/

*NOTE* cannot go here with regular browser as they all enforce httpS
*always* even if you type http://

*NOTE* curl'ing to http works, https doesn't work...as expected.

: kubectl delete -f .

*ODD* even after i do above curl is still fetching site?  Is it
cached?  Why could that be?

Okay do a hard removal of the server and verify curl not working any
longer.

: cd ~/projects/kube-cloj/hetzner
: hetzner-k3s delete --config cluster-config.yaml

*WEIRD* STILL curl works....hmmm...must be some kind of cache or something...

*NOTE* Cannot port-forward to svc/blah-app but *can* to svc/blah-lb,
i.e. the load-balancer.

 - [ ] move example towards clojure


* Goal move working example slowly towards my-clojure version.

When I change the service name from blah-app to blah-app-svc
AND
when i change the load balancer to select blah-app-svc

The load balancer *fails* to become healthy.  Hmmm... thought I could
name these whatever I wanted!
